{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d15afe27",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "                <script type=\"application/javascript\" id=\"jupyter_black\">\n",
       "                (function() {\n",
       "                    if (window.IPython === undefined) {\n",
       "                        return\n",
       "                    }\n",
       "                    var msg = \"WARNING: it looks like you might have loaded \" +\n",
       "                        \"jupyter_black in a non-lab notebook with \" +\n",
       "                        \"`is_lab=True`. Please double check, and if \" +\n",
       "                        \"loading with `%load_ext` please review the README!\"\n",
       "                    console.log(msg)\n",
       "                    alert(msg)\n",
       "                })()\n",
       "                </script>\n",
       "                "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%load_ext autoreload\n",
    "%autoreload 2\n",
    "%load_ext jupyter_black"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "57fe887b-d30f-4c00-acef-3c7a4902ba50",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "from evallm.experiments.transducer_summary import sample_dfa_spec, prompt_by_key\n",
    "from evallm.experiments.transducer_experiment import run_transducer_experiment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "eddf8178-b113-4fcf-9f1a-0aaa338ffb92",
   "metadata": {},
   "outputs": [],
   "source": [
    "num_dfas = 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0305983c-27d7-45a2-a33d-75ce9d84f0c0",
   "metadata": {},
   "outputs": [],
   "source": [
    "key = \"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\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5641ebcc-5500-4c2f-b3ae-0896db52ef20",
   "metadata": {},
   "outputs": [],
   "source": [
    "from permacache import no_cache_global"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "51a53ccc-5747-4084-9bfa-7d96edcdb7d1",
   "metadata": {},
   "outputs": [],
   "source": [
    "import evallm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c3d50cd9-4a3b-484c-9d3b-e4c3857e844a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def small_experiment(model_name, num_dfas=num_dfas, num_repeats_per_dfa=30):\n",
    "    return run_transducer_experiment(\n",
    "        model=model_name,\n",
    "        num_repeats_per_dfa=num_repeats_per_dfa,\n",
    "        sample_dfa_spec=sample_dfa_spec,\n",
    "        prompter=prompt_by_key[\"Red-Green\"][\"chat\"],\n",
    "        num_dfas=num_dfas,\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b661e6ea-807d-4a92-a440-91390f29293d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# evallm.llm.llm.nvidia_create(messages=evallm.llm.llm.to_messages(\"what is the capital of lima\"), model=\"deepseek-ai/deepseek-r1\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "51354937-0295-4020-a33d-750613ccf19e",
   "metadata": {},
   "outputs": [],
   "source": [
    "from evallm.experiments.transducer_experiment import single_transducer_experiment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "5b2f876b-4256-424a-8550-658f3a78f864",
   "metadata": {},
   "outputs": [],
   "source": [
    "# u = single_transducer_experiment(\n",
    "#     seed=4,\n",
    "#     model=\"deepseek-ai/deepseek-r1\",\n",
    "#     num_repeats_per_dfa=3,\n",
    "#     sample_dfa_spec=sample_dfa_spec,\n",
    "#     prompter=prompt_by_key[\"Red-Green\"][\"chat\"],\n",
    "#     print_completions=True,\n",
    "# )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "5fb906af-bf09-4b69-889f-42f1508c3823",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: deepseek-ai/deepseek-r1, Sampling: {'type': 'sample_reachable_dfa', 'n_states': 3, 'n_symbols': 3}, Prompter: RedGreenRoomPrompt1(30, 3, 1)\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d1caec2c45b8411dad97cb56f5647b92",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/1 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "8e8f1e1ee5854f209e39c404dbe243dc",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/3 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "ename": "AttributeError",
     "evalue": "'str' object has no attribute 'choices'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[11], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m results \u001b[38;5;241m=\u001b[39m small_experiment(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdeepseek-ai/deepseek-r1\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;241m1\u001b[39m, \u001b[38;5;241m3\u001b[39m)\n",
      "Cell \u001b[0;32mIn[7], line 2\u001b[0m, in \u001b[0;36msmall_experiment\u001b[0;34m(model_name, num_dfas, num_repeats_per_dfa)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21msmall_experiment\u001b[39m(model_name, num_dfas\u001b[38;5;241m=\u001b[39mnum_dfas, num_repeats_per_dfa\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m30\u001b[39m):\n\u001b[0;32m----> 2\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m run_transducer_experiment(\n\u001b[1;32m      3\u001b[0m         model\u001b[38;5;241m=\u001b[39mmodel_name,\n\u001b[1;32m      4\u001b[0m         num_repeats_per_dfa\u001b[38;5;241m=\u001b[39mnum_repeats_per_dfa,\n\u001b[1;32m      5\u001b[0m         sample_dfa_spec\u001b[38;5;241m=\u001b[39msample_dfa_spec,\n\u001b[1;32m      6\u001b[0m         prompter\u001b[38;5;241m=\u001b[39mprompt_by_key[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mRed-Green\u001b[39m\u001b[38;5;124m\"\u001b[39m][\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mchat\u001b[39m\u001b[38;5;124m\"\u001b[39m],\n\u001b[1;32m      7\u001b[0m         num_dfas\u001b[38;5;241m=\u001b[39mnum_dfas,\n\u001b[1;32m      8\u001b[0m     )\n",
      "File \u001b[0;32m/mnt/md0/packages/permacache/permacache/cache.py:76\u001b[0m, in \u001b[0;36mCachedFunction.__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m     74\u001b[0m             \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mDeleting key\u001b[39m\u001b[38;5;124m\"\u001b[39m, file\u001b[38;5;241m=\u001b[39msys\u001b[38;5;241m.\u001b[39mstderr)\n\u001b[1;32m     75\u001b[0m             \u001b[38;5;28;01mdel\u001b[39;00m db[key]\n\u001b[0;32m---> 76\u001b[0m value \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_run_underlying(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m     77\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mshelf \u001b[38;5;28;01mas\u001b[39;00m db:\n\u001b[1;32m     78\u001b[0m     \u001b[38;5;66;03m# TODO maybe check if key is now in db\u001b[39;00m\n\u001b[1;32m     79\u001b[0m     db[key] \u001b[38;5;241m=\u001b[39m value\n",
      "File \u001b[0;32m/mnt/md0/packages/permacache/permacache/cache.py:51\u001b[0m, in \u001b[0;36mCachedFunction._run_underlying\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m     49\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_error_on_miss \u001b[38;5;129;01mor\u001b[39;00m error_on_miss_global\u001b[38;5;241m.\u001b[39merror_on_miss:\n\u001b[1;32m     50\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m CacheMissError\n\u001b[0;32m---> 51\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfunction(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[0;32m/mnt/md0/evallm/evallm/experiments/transducer_experiment.py:159\u001b[0m, in \u001b[0;36mrun_transducer_experiment\u001b[0;34m(model, sample_dfa_spec, prompter, num_repeats_per_dfa, num_dfas)\u001b[0m\n\u001b[1;32m    150\u001b[0m \u001b[38;5;129m@permacache\u001b[39m(\n\u001b[1;32m    151\u001b[0m     os\u001b[38;5;241m.\u001b[39mpath\u001b[38;5;241m.\u001b[39mjoin(cache_dir, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mrun_transducer_experiment\u001b[39m\u001b[38;5;124m\"\u001b[39m),\n\u001b[1;32m    152\u001b[0m     key_function\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mdict\u001b[39m(prompter\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mrepr\u001b[39m),\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    156\u001b[0m     model, sample_dfa_spec, prompter, num_repeats_per_dfa, num_dfas\n\u001b[1;32m    157\u001b[0m ):\n\u001b[1;32m    158\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mModel: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mmodel\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m, Sampling: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00msample_dfa_spec\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m, Prompter: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mprompter\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m--> 159\u001b[0m     _, results \u001b[38;5;241m=\u001b[39m run_multiple(\n\u001b[1;32m    160\u001b[0m         model\u001b[38;5;241m=\u001b[39mmodel,\n\u001b[1;32m    161\u001b[0m         num_repeats_per_dfa\u001b[38;5;241m=\u001b[39mnum_repeats_per_dfa,\n\u001b[1;32m    162\u001b[0m         sample_dfa_spec\u001b[38;5;241m=\u001b[39msample_dfa_spec,\n\u001b[1;32m    163\u001b[0m         prompter\u001b[38;5;241m=\u001b[39mprompter,\n\u001b[1;32m    164\u001b[0m         num_dfas\u001b[38;5;241m=\u001b[39mnum_dfas,\n\u001b[1;32m    165\u001b[0m     )\n\u001b[1;32m    166\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m results\n",
      "File \u001b[0;32m/mnt/md0/evallm/evallm/experiments/transducer_experiment.py:132\u001b[0m, in \u001b[0;36mrun_multiple\u001b[0;34m(model, sample_dfa_spec, prompter, num_repeats_per_dfa, num_dfas)\u001b[0m\n\u001b[1;32m    130\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m seed \u001b[38;5;129;01min\u001b[39;00m itertools\u001b[38;5;241m.\u001b[39mcount():\n\u001b[1;32m    131\u001b[0m     \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 132\u001b[0m         dfa, result \u001b[38;5;241m=\u001b[39m single_transducer_experiment(\n\u001b[1;32m    133\u001b[0m             seed\u001b[38;5;241m=\u001b[39mseed,\n\u001b[1;32m    134\u001b[0m             model\u001b[38;5;241m=\u001b[39mmodel,\n\u001b[1;32m    135\u001b[0m             num_repeats_per_dfa\u001b[38;5;241m=\u001b[39mnum_repeats_per_dfa,\n\u001b[1;32m    136\u001b[0m             sample_dfa_spec\u001b[38;5;241m=\u001b[39msample_dfa_spec,\n\u001b[1;32m    137\u001b[0m             prompter\u001b[38;5;241m=\u001b[39mprompter,\n\u001b[1;32m    138\u001b[0m         )\n\u001b[1;32m    139\u001b[0m     \u001b[38;5;28;01mexcept\u001b[39;00m TrivialProblemError:\n\u001b[1;32m    140\u001b[0m         \u001b[38;5;28;01mcontinue\u001b[39;00m\n",
      "File \u001b[0;32m/mnt/md0/evallm/evallm/experiments/transducer_experiment.py:99\u001b[0m, in \u001b[0;36msingle_transducer_experiment\u001b[0;34m(seed, model, num_repeats_per_dfa, sample_dfa_spec, prompter, print_completions)\u001b[0m\n\u001b[1;32m     97\u001b[0m rng \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mrandom\u001b[38;5;241m.\u001b[39mRandomState(seed)\n\u001b[1;32m     98\u001b[0m dfa \u001b[38;5;241m=\u001b[39m sample_dfa(sample_dfa_spec, rng)\n\u001b[0;32m---> 99\u001b[0m completions, metas, prompts, scores \u001b[38;5;241m=\u001b[39m prompter\u001b[38;5;241m.\u001b[39mrun_experiment(\n\u001b[1;32m    100\u001b[0m     dfa, rng, model, num_repeats_per_dfa\n\u001b[1;32m    101\u001b[0m )\n\u001b[1;32m    102\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m print_completions:\n\u001b[1;32m    103\u001b[0m     \u001b[38;5;28mprint\u001b[39m(completions)\n",
      "File \u001b[0;32m/mnt/md0/evallm/evallm/prompting/prompter.py:55\u001b[0m, in \u001b[0;36mPrompter.run_experiment\u001b[0;34m(self, dfa, rng, model, num_samples)\u001b[0m\n\u001b[1;32m     53\u001b[0m     completions \u001b[38;5;241m=\u001b[39m [\u001b[38;5;28;01mNone\u001b[39;00m] \u001b[38;5;241m*\u001b[39m num_samples\n\u001b[1;32m     54\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m---> 55\u001b[0m     completions \u001b[38;5;241m=\u001b[39m run_prompt(\n\u001b[1;32m     56\u001b[0m         model\u001b[38;5;241m=\u001b[39mmodel,\n\u001b[1;32m     57\u001b[0m         prompt\u001b[38;5;241m=\u001b[39mprompts,\n\u001b[1;32m     58\u001b[0m         kwargs\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mprompt_kwargs(),\n\u001b[1;32m     59\u001b[0m     )\u001b[38;5;241m.\u001b[39mchoices\n\u001b[1;32m     60\u001b[0m scores \u001b[38;5;241m=\u001b[39m [\n\u001b[1;32m     61\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mscore_completion(answer, choice)\n\u001b[1;32m     62\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m answer, choice \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mzip\u001b[39m(answers, completions)\n\u001b[1;32m     63\u001b[0m ]\n\u001b[1;32m     64\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m completions, metas, prompts, scores\n",
      "File \u001b[0;32m/mnt/md0/packages/permacache/permacache/cache.py:76\u001b[0m, in \u001b[0;36mCachedFunction.__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m     74\u001b[0m             \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mDeleting key\u001b[39m\u001b[38;5;124m\"\u001b[39m, file\u001b[38;5;241m=\u001b[39msys\u001b[38;5;241m.\u001b[39mstderr)\n\u001b[1;32m     75\u001b[0m             \u001b[38;5;28;01mdel\u001b[39;00m db[key]\n\u001b[0;32m---> 76\u001b[0m value \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_run_underlying(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m     77\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mshelf \u001b[38;5;28;01mas\u001b[39;00m db:\n\u001b[1;32m     78\u001b[0m     \u001b[38;5;66;03m# TODO maybe check if key is now in db\u001b[39;00m\n\u001b[1;32m     79\u001b[0m     db[key] \u001b[38;5;241m=\u001b[39m value\n",
      "File \u001b[0;32m/mnt/md0/packages/permacache/permacache/cache.py:51\u001b[0m, in \u001b[0;36mCachedFunction._run_underlying\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m     49\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_error_on_miss \u001b[38;5;129;01mor\u001b[39;00m error_on_miss_global\u001b[38;5;241m.\u001b[39merror_on_miss:\n\u001b[1;32m     50\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m CacheMissError\n\u001b[0;32m---> 51\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfunction(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[0;32m/mnt/md0/evallm/evallm/llm/llm.py:202\u001b[0m, in \u001b[0;36mrun_prompt\u001b[0;34m(model, prompt, kwargs)\u001b[0m\n\u001b[1;32m    191\u001b[0m     map_fn \u001b[38;5;241m=\u001b[39m (\n\u001b[1;32m    192\u001b[0m         p\u001b[38;5;241m.\u001b[39mmap\n\u001b[1;32m    193\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m num_parallel \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m1\u001b[39m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    196\u001b[0m         )\n\u001b[1;32m    197\u001b[0m     )\n\u001b[1;32m    198\u001b[0m     choices_each \u001b[38;5;241m=\u001b[39m map_fn(\n\u001b[1;32m    199\u001b[0m         functools\u001b[38;5;241m.\u001b[39mpartial(create_openai_completion, model, kwargs),\n\u001b[1;32m    200\u001b[0m         prompt,\n\u001b[1;32m    201\u001b[0m     )\n\u001b[0;32m--> 202\u001b[0m     choices_each \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mlist\u001b[39m(choices_each)\n\u001b[1;32m    203\u001b[0m choices \u001b[38;5;241m=\u001b[39m []\n\u001b[1;32m    204\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m x \u001b[38;5;129;01min\u001b[39;00m choices_each:\n",
      "File \u001b[0;32m/mnt/md0/evallm/evallm/llm/llm.py:240\u001b[0m, in \u001b[0;36mcreate_openai_completion\u001b[0;34m(model, kwargs, prompt)\u001b[0m\n\u001b[1;32m    238\u001b[0m     \u001b[38;5;28;01mdel\u001b[39;00m kwargs[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmax_tokens\u001b[39m\u001b[38;5;124m\"\u001b[39m]\n\u001b[1;32m    239\u001b[0m create \u001b[38;5;241m=\u001b[39m get_create_method(model)\n\u001b[0;32m--> 240\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m create(model\u001b[38;5;241m=\u001b[39mmodel, messages\u001b[38;5;241m=\u001b[39mto_messages(prompt), \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[0;32m/mnt/md0/evallm/evallm/llm/llm.py:135\u001b[0m, in \u001b[0;36mnvidia_create\u001b[0;34m(messages, **kwargs)\u001b[0m\n\u001b[1;32m    130\u001b[0m completion \u001b[38;5;241m=\u001b[39m nvidia_client\u001b[38;5;241m.\u001b[39mchat\u001b[38;5;241m.\u001b[39mcompletions\u001b[38;5;241m.\u001b[39mcreate(\n\u001b[1;32m    131\u001b[0m     messages\u001b[38;5;241m=\u001b[39mmessages,\n\u001b[1;32m    132\u001b[0m     \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs,\n\u001b[1;32m    133\u001b[0m )\n\u001b[1;32m    134\u001b[0m \u001b[38;5;28mprint\u001b[39m(completion)\n\u001b[0;32m--> 135\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m completion\u001b[38;5;241m.\u001b[39mchoices\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'str' object has no attribute 'choices'"
     ]
    }
   ],
   "source": [
    "results = small_experiment(\"deepseek-ai/deepseek-r1\", 1, 3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3440b8a1-251c-4420-a916-4e058d1c3b0b",
   "metadata": {},
   "outputs": [],
   "source": [
    "results = small_experiment(\"deepseek-ai/deepseek-r1\", 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a84064c7-e3d5-4d58-bbe8-0a01f2ce2170",
   "metadata": {},
   "outputs": [],
   "source": [
    "# with no_cache_global():\n",
    "#     # result = evallm.llm.llm.run_prompt(\n",
    "#     #     \"deepseek-ai/deepseek-r1\", [{\"user\": \"what is the capital of lima\"}], {}\n",
    "#     # )\n",
    "#     results = small_experiment(\"deepseek-ai/deepseek-r1\", 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "71a90f57-5c61-4b7b-b8ac-03c7eeae6445",
   "metadata": {},
   "outputs": [],
   "source": [
    "def compute_frac(x):\n",
    "    numer = (np.array(x.success_rate_each) == 1).sum()\n",
    "    denom = (np.array(x.success_rate_each) != 0.5).sum()\n",
    "    return numer, denom\n",
    "\n",
    "\n",
    "def render_frac(x):\n",
    "    numer, denom = compute_frac(x)\n",
    "    return f\"{numer:.0f}/{denom:.0f}\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "fddead87-5018-4291-aae3-539509502bb8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[nan]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[x.success_rate_binary_ignore_na for x in results]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "29355da4-88e0-490f-acac-2c4226c6562a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "URL('https://integrate.api.nvidia.com/v1/')"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# evallm.llm.llm.nvidia_client.base_url"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "eaf2cb63-3334-4140-aec0-654c8d9b889e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<think>\n",
      "\n",
      "</think>\n",
      "\n",
      "Hello! How can I assist you today? 😊"
     ]
    }
   ],
   "source": [
    "from openai import OpenAI\n",
    "\n",
    "client = evallm.llm.llm.nvidia_client\n",
    "\n",
    "completion = client.chat.completions.create(\n",
    "    model=\"deepseek-ai/deepseek-r1\",\n",
    "    messages=[{\"role\": \"user\", \"content\": \"\"}],\n",
    "    temperature=0.6,\n",
    "    top_p=0.7,\n",
    "    max_tokens=4096,\n",
    "    stream=True,\n",
    ")\n",
    "\n",
    "for chunk in completion:\n",
    "    if chunk.choices[0].delta.content is not None:\n",
    "        print(chunk.choices[0].delta.content, end=\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b147f780-84cf-444f-8210-2fc8c8f0e2f0",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
